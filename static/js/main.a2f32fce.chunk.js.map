{"version":3,"sources":["index.ts"],"names":["window","BigUint64Array","Float64Array","catch","console","log"],"mappings":"kJAAA,OAkBK,mBAAoBA,UAAY,IAGjCA,OAAOC,eAAiBC,cAG5B,kDAAiBC,OAAM,kBAAMC,QAAQC,IAAI,yB","file":"static/js/main.a2f32fce.chunk.js","sourcesContent":["// Copyright (c) 2020, The rav1e contributors. All rights reserved\n//\n// This source code is subject to the terms of the BSD 2 Clause License and\n// the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License\n// was not distributed with this source code in the LICENSE file, you can\n// obtain it at www.aomedia.org/license/software. If the Alliance for Open\n// Media Patent License 1.0 was not distributed with this source code in the\n// PATENTS file, you can obtain it at www.aomedia.org/license/patent.\n\n// Workaround: BigUint64Array in Safari\n// from: https://github.com/takahirox/riscv-rust/pull/116/files\n//\n// Mac/iOS doesn't seem to support BigUint64Array used in JS-WASM bridge. There \n// might be no way to precisely simulate so just applying workaround here to avoid\n// reference error and trying to avoid the path using BigUint64Array in continue().\ndeclare global {\n    interface Window { BigUint64Array: any; }\n}\nif (('BigUint64Array' in window) === false) {\n    // This is not correct polyfill but just assigning\n    // the same width typed array so far.\n    window.BigUint64Array = Float64Array;\n}\n\nimport(\"./main\").catch(() => console.log(\"Failed importing\"));\n\nexport { }\n"],"sourceRoot":""}